perché bisogna pensare a come ampliarla in caso di merge
per esempio, se io queste due stringhe:
ciccio2425pasticcio2825
gino23pino25
e ne produco una regex per ognuna. e poi devo fonderle
dovrei avere questo:
[a-z]{4,6}[0-9]{2,4}[a-z]{4,9}[0-9]{2,4}
allora probabilmente la cosa più semplice è creare prima un parser ad albero che è in grado di digerire le regole che vuoi usare.
prendiamo per esempio l'ultima regex, il parser dovrebbe creare un array così:
[
  {
    "filter":"[a-z]",
    "min_occurrencies":4,
    "max_occurrencies":6,
   },
   {
    "filter":"[0-9]",
    "min_occurrencies":2,
    "max_occurrencies":4
   }
]
e così via
e così via
in questo modo, quando incontri due regex, puoi fonderle comparando oggetto per oggetto
e poi questa classe aggiungi uno "stringhificatore" che ti ritorna la regex
a questo punto direi che vale la pena che tu guardi come fare una classe in python
perché in effetti ti servirà
ma del merge parliamo dopo
quindi, pensiamo alle regole
troviamo:
elementi di testo  a-z A-Z anche misti
elementi di numeri
i caratteri speciali vengono semplicemente hardcodati
ok?
